# プロジェクト名: supplement-app/docs/project-overview.yaml

project:
  name: supplement-app
  description: サプリメント管理アプリケーション
  tech_stack:
    framework: Next.js 13.4.19
    language: TypeScript
    backend: Firebase
    styling: TailwindCSS 3.3.3
    animation: framer-motion
    form_validation: Zod, React Hook Form

architecture:
  directories:
    - src/pages: ルーティングとページコンポーネント
    - src/components: 再利用可能なUIコンポーネント
    - src/context: コンテキストプロバイダー
    - src/providers: 状態管理プロバイダー
    - src/hooks: カスタムフック
    - src/lib: ユーティリティ関数とFirebase連携
    - src/styles: グローバルスタイル
    - src/schemas: バリデーションスキーマ定義

  schema_management:
    - rule: "Zodバリデーションスキーマはsrc/schemas/ディレクトリに配置する"
    - rule: "機能ごとに別ファイルで管理（例：auth.ts, supplement.ts, form-schemas.ts）"
    - rule: "フォーム関連の汎用スキーマはsrc/schemas/form-schemas.tsに配置"
    - rule: "再利用可能な共通バリデーションロジックは関数として抽出する"
    - rule: "型定義はスキーマと同じファイルに配置し、z.infer<typeof schema>で生成する"
    - rule: "UIコンポーネントからバリデーションロジックを分離し、スキーマファイルに集中管理する"
    - naming_convention:
        - "ドメインモデル: src/schemas/{モデル名}.ts"
        - "フォーム統合: src/schemas/form-schemas.ts"
        - "機能別フォーム: src/schemas/{機能名}-forms.ts"

features:
  - name: 認証
    location:
      - src/context/AuthContext.tsx
      - src/pages/login.tsx
      - src/pages/signup.tsx
      - src/schemas/auth.ts
    functions:
      - AuthProvider: 認証状態の管理
      - loginSchema: ログインフォームのバリデーション
      - signupSchema: 新規登録フォームのバリデーション
    details: |
      Firebase Authenticationを使用したユーザー認証機能。
      Zodを使用した堅牢なフォームバリデーションを実装し、以下の検証を行っています：

      ログインフォーム:
      - メールアドレス: 必須入力、有効なメールアドレス形式
      - パスワード: 必須入力、8文字以上

      新規登録フォーム:
      - メールアドレス: 必須入力、有効なメールアドレス形式
      - パスワード: 必須入力、8文字以上、小文字・大文字・数字を含む
      - パスワード確認: 必須入力、パスワードとの一致

      Firebase認証エラーハンドリング:
      - メールアドレス重複
      - ユーザー未登録
      - パスワード不一致
      - ログイン試行回数超過
      などのエラーに対して適切なメッセージを表示

  - name: サプリメント管理
    location:
      - src/lib/firestore.ts
      - src/schemas/supplement.ts
      - src/lib/type-guards.ts
    functions:
      - addSupplement: サプリメント追加
      - getSupplements: サプリメント一覧取得
      - updateSupplement: サプリメント更新
      - deleteSupplement: サプリメント削除
      - uploadImage: 画像アップロード
      - updateSupplementDosage: 服用量更新
      - updateSupplementCount: 服用回数更新
      - getCurrentDate: 現在の日付を取得
      - resetTimingsIfDateChanged: 日付変更時の服用状況リセット
      - supplementSchema: サプリメント登録・編集用のバリデーションスキーマ
      - convertToSupplementData: APIレスポンスをSupplementData型に変換
      - convertToSupplementDataArray: APIレスポンス配列をSupplementData型配列に変換
    details: |
      サプリメントの管理機能に日付変更時の自動リセット機能を追加。
      毎日0時になると服用状況（朝・昼・夜など）または服用回数が自動的にリセットされ、
      新しい1日の服用管理が開始される。サーバーと連携して確実に
      リセットされる仕組みになっている。

      服用管理方法には「タイミングベース」と「回数ベース」の2種類から選択可能。

      タイミングベースでは以下のタイミングから選択可能:
      - 時間帯: 朝・昼・夜
      - 食事関連: 食前・食後・空腹時・就寝前

      回数ベースでは1日の目標服用回数を設定し、+/-ボタンで服用回数をカウント。
      服用履歴も記録される。

      UI改善点:
      - サプリメント服用ボタンをカプセル型UIに改良し、視認性と操作性を向上
      - タイミングボタンの境界線を2pxに強化し、コントラストを改善
      - ボタンホバー時と押下時のアニメーション効果を追加（scale変化）
      - 服用回数表示を横スクロールで1列表示に変更し、最新の数字が右端に表示されるよう右揃えに
      - カウントボタン（+/-）を丸みを帯びたデザインに統一し、シャドウエフェクトを追加
      - アニメーションフィードバックを改善し、サークル付きチェックマークでより視覚的に明確に
      - カプセル型UIの境界線を2pxに強化し、シャドウエフェクトを追加してより立体的に
      - プラス・マイナスボタンの背景色を薄いグレーに変更し、ホバー/押下時の視覚効果を強化
      - 操作可能な領域を明確にするためのシャドウエフェクトと色の調整によりメリハリを向上
      - インラインスタイルとイベントハンドラを用いた直接的な視覚フィードバックを実装
      - ボタンのホバー時・押下時の色変更を動的に行い、操作性をさらに向上
      - 服用回数表示エリアのスクロール機能を改善（スマホUIスタイル）
        - スクロールバーを非表示にしつつ横スクロールを有効化
        - タッチデバイスでのスワイプ操作に対応（touch-pan-x）
        - ドラッグ操作に対応するカーソルスタイル（cursor-grab）を適用
        - アクセシビリティ対応のためのARIA属性とTabIndex追加
        - 最新の服用回数が常に右端に表示される右揃えレイアウトを維持
        - 新しく服用回数が増えた際に自動的に右端へスクロールする機能を追加
        - 右揃えとスクロール機能を両立するため、最小幅設定とuseEffectによる自動スクロール処理を実装
        - 服用回数の増減に応じてリアクティブにスクロール位置を更新する仕組みを導入

  - name: 通知システム
    location:
      - src/providers/NotificationContext.tsx
      - src/components/NotificationPopup.tsx
    functions:
      - showNotification: 通知表示
      - NotificationProvider: 通知状態管理

  - name: アクセシビリティ
    description: ユーザーの多様なニーズに対応するアクセシビリティ機能
    implementations:
      - name: ARIA属性
        locations:
          - src/components/ui/button.tsx
          - src/components/ui/input.tsx
          - src/components/ui/card.tsx
          - src/components/ui/dialog.tsx
          - src/components/NotificationPopup.tsx
          - src/pages/index.tsx
          - src/pages/login.tsx
          - src/pages/signup.tsx
        details: スクリーンリーダー対応のためのARIA属性を追加

      - name: キーボードナビゲーション
        locations:
          - src/components/ui/button.tsx
          - src/components/ui/dialog.tsx
          - src/components/ui/card.tsx
        details: キーボードフォーカスの適切な移動とtabIndex設定

      - name: フォーカス視覚フィードバック
        locations:
          - src/components/ui/button.tsx
          - src/components/ui/input.tsx
          - src/components/ui/card.tsx
          - src/pages/login.tsx
          - src/pages/signup.tsx
        details: フォーカス状態の視覚的フィードバックの強化（リングスタイルなど）

  - name: アニメーション
    description: ユーザー体験向上のためのアニメーション機能
    location:
      - src/lib/animation.ts
      - src/components/ui/animated-card.tsx
      - src/components/AnimatedFeedback.tsx
      - src/components/PageTransition.tsx
      - src/pages/_app.tsx
      - src/pages/index.tsx
    implementations:
      - name: カードホバーアニメーション
        location: src/components/ui/animated-card.tsx
        details: カードUIにカーソルホバー時のアニメーション効果

      - name: 服用記録フィードバックアニメーション
        location: src/components/AnimatedFeedback.tsx
        details: |
          服用記録時の視覚的フィードバックアニメーション。
          サークル付きチェックマークを用いた明確な視覚フィードバックを提供。
          カード中央での表示に対応し、タイミングベースと回数ベースの両方で統一的な
          フィードバックを実現。
          ボタン操作時の視覚的フィードバックも強化し、ユーザー体験を向上。

      - name: ページ遷移アニメーション
        location: src/components/PageTransition.tsx
        details: ページ間の遷移をスムーズにするアニメーション

      - name: ボタンアニメーション
        location: src/components/ui/animated-button.tsx
        details: |
          服用タイミングボタンのアニメーション効果。
          ボタン押下時の満ちていくアニメーションに加え、ホバー時の拡大と
          押下時の縮小エフェクトを追加。シャドウ効果も追加し、立体感と操作性を向上。

      - name: インタラクティブフィードバック
        location: src/pages/index.tsx
        details: |
          服用回数操作ボタンのインタラクティブフィードバック。
          マウスホバーやクリック時に背景色を動的に変更するイベントハンドラを実装し、
          ユーザーの操作に対するリアルタイムな視覚フィードバックを提供。
          Tailwindだけでは実現困難な動的な色変化をインラインスタイルとJavaScriptイベントで実現。
          通常時の背景色も薄いグレーから中間的なグレー(#e5e7eb)に調整し、
          ホバー時はより濃いグレー(#d1d5db)、押下時はさらに濃いグレー(#9ca3af)に
          変化させることで、操作感を大幅に向上させた。

  - name: 服用方法UI（RecommendedIntakeInfo）
    location: src/components/RecommendedIntakeInfo.tsx
    details: |
      サプリメントカード内の「服用方法」表示UIを大幅に改善。
      - 服用方法の詳細説明をポップアップ形式で表示し、カード内の左右中央に揃えて重なりを防止
      - ポップアップは服用方法エリアの上に重なり、スクロール不要なサイズで全内容が読めるよう調整
      - ポップアップには閉じるボタンを追加し、ユーザーが直感的に操作できるよう配慮
      - 服用方法エリアは常時背景色・ボーダーを表示し、ポップアップ非表示時も視認性を確保
      - UI全体の配色・余白・シャドウを調整し、視認性と一貫性を向上
      - 各服用タイミングのアイコン・ラベル表示を統一し、アクセシビリティも考慮
      - 既存のカードUIやフォームUIとのデザイン統一を図り、ユーザー体験を向上

  - name: フォームバリデーション
    location:
      - src/pages/login.tsx
      - src/pages/signup.tsx
      - src/pages/index.tsx
      - src/schemas/auth.ts
      - src/schemas/supplement.ts
    functions:
      - loginSchema: ログインフォームのバリデーション
      - signupSchema: 新規登録フォームのバリデーション
      - supplementSchema: サプリメント登録フォームのバリデーション
    details: |
      Zodを使用した堅牢なフォームバリデーションを実装。
      React Hook Formと連携し、以下の機能を提供:

      - リアルタイムバリデーション
      - エラーメッセージの表示
      - フォーム送信時の検証
      - 複雑な条件付きバリデーション（refineメソッド使用）

      各フォームに適したバリデーションルールを設定:

      ログインフォーム:
      - メールアドレス: 必須、メール形式
      - パスワード: 必須、8文字以上

      新規登録フォーム:
      - メールアドレス: 必須、メール形式
      - パスワード: 必須、8文字以上、複雑さ要件（小文字、大文字、数字を含む）
      - パスワード確認: 必須、パスワードとの一致

      サプリメント登録フォーム:
      - サプリメント名: 必須
      - 内容量: 必須、正の整数
      - 服用量: 必須、正の整数
      - 単位: 必須
      - 服用方法: タイミングベースまたは回数ベース
      - タイミングベース選択時: 少なくとも1つの時間帯選択が必須
      - 回数ベース選択時: 目標服用回数の入力が必須（正の整数）
      - 推奨服用方法: 食前/食後/なしをラジオボタンで排他的選択、空腹時と就寝前はチェックボックスで独立選択

      コードの保守性向上のため、バリデーションスキーマを専用の src/schemas ディレクトリに
      分離し、各機能ごとに別ファイルで管理。これにより:

      - コードの再利用性向上
      - 関心の分離
      - 保守性の向上
      - テスト容易性

      数値フィールドのバリデーション強化:
      - 未入力時の適切なエラーメッセージ表示
      - 1桁目の削除を可能にする入力方式の実装
      - 正の整数値のみ許可するバリデーション
      - 共通のバリデーションロジックを関数として抽出（numberFieldSchema）

      型変換に関しては、src/lib/type-guards.ts にAPIレスポンスと
      モデルの変換を行うユーティリティ関数を実装。これによりFirestoreから取得した
      データを安全にアプリケーションの型定義に変換できる。
