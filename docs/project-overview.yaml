# プロジェクト名: supplement-app/docs/project-overview.yaml

project:
  name: supplement-app
  description: サプリメント管理アプリケーション
  tech_stack:
    framework: Next.js 15.3.3
    language: TypeScript
    backend: Firebase
    styling: TailwindCSS 3.3.3
    animation: framer-motion
    form_validation: Zod, React Hook Form
    development_tools:
      code_formatting: Prettier ^3.5.3
      git_hooks: Husky ^8.0.0
      staged_linting: Lint-Staged ^15.0.2
      linting: ESLint ^8.48.0
      type_checking: TypeScript ^5.6.2
    security_updates:
      latest_update: "2024年末: Next.js 13.4.19 → 15.3.3、PostCSS 8.4.29 → 8.5.4 セキュリティ脆弱性対応"
      vulnerabilities_fixed: "SSRF、HTTP Request Smuggling、認証バイパス、PostCSS line return parsing error等"
      breaking_change: "Next.js 15へのメジャーアップグレード（破壊的変更含む）"
      pending_updates:
        firebase_v11:
          current_version: "10.13.2"
          available_version: "11.8.1"
          moderate_vulnerabilities: 10
          vulnerability_source: "undici依存関係（Firebase SDK経由）"
          risk_assessment: "メジャーアップグレード、破壊的変更の可能性あり"
          recommendation: "別PR対応推奨、慎重な検証が必要"

architecture:
  directories:
    - src/pages: ルーティングとページコンポーネント
    - src/components: 再利用可能なUIコンポーネント
    - src/context: コンテキストプロバイダー
    - src/providers: 状態管理プロバイダー
    - src/hooks: カスタムフック
    - src/lib: ユーティリティ関数とFirebase連携
    - src/styles: グローバルスタイル
    - src/schemas: バリデーションスキーマ定義

  schema_management:
    - rule: "Zodバリデーションスキーマはsrc/schemas/ディレクトリに配置する"
    - rule: "機能ごとに別ファイルで管理（例：auth.ts, supplement.ts, form-schemas.ts）"
    - rule: "フォーム関連の汎用スキーマはsrc/schemas/form-schemas.tsに配置"
    - rule: "再利用可能な共通バリデーションロジックは関数として抽出する"
    - rule: "型定義はスキーマと同じファイルに配置し、z.infer<typeof schema>で生成する"
    - rule: "UIコンポーネントからバリデーションロジックを分離し、スキーマファイルに集中管理する"
    - naming_convention:
        - "ドメインモデル: src/schemas/{モデル名}.ts"
        - "フォーム統合: src/schemas/form-schemas.ts"
        - "機能別フォーム: src/schemas/{機能名}-forms.ts"

features:
  - name: 認証
    location:
      - src/context/AuthContext.tsx
      - src/pages/login.tsx
      - src/pages/signup.tsx
      - src/schemas/auth.ts
    functions:
      - AuthProvider: 認証状態の管理
      - loginSchema: ログインフォームのバリデーション
      - signupSchema: 新規登録フォームのバリデーション
    details: |
      Firebase Authenticationを使用したユーザー認証機能。
      Zodを使用した堅牢なフォームバリデーションを実装し、以下の検証を行っています：

      ログインフォーム:
      - メールアドレス: 必須入力、有効なメールアドレス形式
      - パスワード: 必須入力、8文字以上

      新規登録フォーム:
      - メールアドレス: 必須入力、有効なメールアドレス形式
      - パスワード: 必須入力、8文字以上、小文字・大文字・数字を含む
      - パスワード確認: 必須入力、パスワードとの一致

      Firebase認証エラーハンドリング:
      - メールアドレス重複
      - ユーザー未登録
      - パスワード不一致
      - ログイン試行回数超過
      などのエラーに対して適切なメッセージを表示

  - name: サプリメント管理
    location:
      - src/lib/firestore.ts
      - src/schemas/supplement.ts
      - src/lib/type-guards.ts
    functions:
      - addSupplement: サプリメント追加
      - getSupplements: サプリメント一覧取得
      - updateSupplement: サプリメント更新
      - deleteSupplement: サプリメント削除
      - uploadImage: 画像アップロード
      - updateSupplementDosage: 服用量更新
      - updateSupplementCount: 服用回数更新
      - getCurrentDate: 現在の日付を取得
      - resetTimingsIfDateChanged: 日付変更時の服用状況リセット
      - supplementSchema: サプリメント登録・編集用のバリデーションスキーマ
      - convertToSupplementData: APIレスポンスをSupplementData型に変換
      - convertToSupplementDataArray: APIレスポンス配列をSupplementData型配列に変換
    details: |
      サプリメントの管理機能に日付変更時の自動リセット機能を追加。
      毎日0時になると服用状況（朝・昼・夜など）または服用回数が自動的にリセットされ、
      新しい1日の服用管理が開始される。サーバーと連携して確実に
      リセットされる仕組みになっている。

      服用管理方法には「タイミングベース」と「回数ベース」の2種類から選択可能。

      タイミングベースでは以下のタイミングから選択可能:
      - 時間帯: 朝・昼・夜
      - 食事関連: 食前・食後・空腹時・就寝前

      回数ベースでは1日の目標服用回数を設定し、+/-ボタンで服用回数をカウント。
      服用履歴も記録される。

      UI改善点:
      - サプリメント服用ボタンをカプセル型UIに改良し、視認性と操作性を向上
      - タイミングボタンの境界線を2pxに強化し、コントラストを改善
      - ボタンホバー時と押下時のアニメーション効果を追加（scale変化）
      - 服用回数表示を横スクロールで1列表示に変更し、最新の数字が右端に表示されるよう右揃えに
      - カウントボタン（+/-）を丸みを帯びたデザインに統一し、シャドウエフェクトを追加
      - アニメーションフィードバックを改善し、サークル付きチェックマークでより視覚的に明確に
      - カプセル型UIの境界線を2pxに強化し、シャドウエフェクトを追加してより立体的に
      - プラス・マイナスボタンの背景色を薄いグレーに変更し、ホバー/押下時の視覚効果を強化
      - 操作可能な領域を明確にするためのシャドウエフェクトと色の調整によりメリハリを向上
      - インラインスタイルとイベントハンドラを用いた直接的な視覚フィードバックを実装
      - ボタンのホバー時・押下時の色変更を動的に行い、操作性をさらに向上
      - 服用回数表示エリアのスクロール機能を改善（スマホUIスタイル）
        - スクロールバーを非表示にしつつ横スクロールを有効化
        - タッチデバイスでのスワイプ操作に対応（touch-pan-x）
        - ドラッグ操作に対応するカーソルスタイル（cursor-grab）を適用
        - アクセシビリティ対応のためのARIA属性とTabIndex追加
        - 最新の服用回数が常に右端に表示される右揃えレイアウトを維持
        - 新しく服用回数が増えた際に自動的に右端へスクロールする機能を追加
        - 右揃えとスクロール機能を両立するため、最小幅設定とuseEffectによる自動スクロール処理を実装
        - 服用回数の増減に応じてリアクティブにスクロール位置を更新する仕組みを導入

  - name: 通知システム
    location:
      - src/providers/NotificationContext.tsx
      - src/components/NotificationPopup.tsx
    functions:
      - showNotification: 通知表示
      - NotificationProvider: 通知状態管理

  - name: アクセシビリティ
    description: ユーザーの多様なニーズに対応するアクセシビリティ機能
    implementations:
      - name: ARIA属性
        locations:
          - src/components/ui/button.tsx
          - src/components/ui/input.tsx
          - src/components/ui/card.tsx
          - src/components/ui/dialog.tsx
          - src/components/NotificationPopup.tsx
          - src/pages/index.tsx
          - src/pages/login.tsx
          - src/pages/signup.tsx
        details: スクリーンリーダー対応のためのARIA属性を追加

      - name: キーボードナビゲーション
        locations:
          - src/components/ui/button.tsx
          - src/components/ui/dialog.tsx
          - src/components/ui/card.tsx
        details: キーボードフォーカスの適切な移動とtabIndex設定

      - name: フォーカス視覚フィードバック
        locations:
          - src/components/ui/button.tsx
          - src/components/ui/input.tsx
          - src/components/ui/card.tsx
          - src/pages/login.tsx
          - src/pages/signup.tsx
        details: フォーカス状態の視覚的フィードバックの強化（リングスタイルなど）

  - name: アニメーション
    description: ユーザー体験向上のためのアニメーション機能
    location:
      - src/lib/animation.ts
      - src/components/ui/animated-card.tsx
      - src/components/AnimatedFeedback.tsx
      - src/components/PageTransition.tsx
      - src/pages/_app.tsx
      - src/pages/index.tsx
    implementations:
      - name: カードホバーアニメーション
        location: src/components/ui/animated-card.tsx
        details: カードUIにカーソルホバー時のアニメーション効果

      - name: 服用記録フィードバックアニメーション
        location: src/components/AnimatedFeedback.tsx
        details: |
          服用記録時の視覚的フィードバックアニメーション。
          サークル付きチェックマークを用いた明確な視覚フィードバックを提供。
          カード中央での表示に対応し、タイミングベースと回数ベースの両方で統一的な
          フィードバックを実現。
          ボタン操作時の視覚的フィードバックも強化し、ユーザー体験を向上。

      - name: ページ遷移アニメーション
        location: src/components/PageTransition.tsx
        details: ページ間の遷移をスムーズにするアニメーション

      - name: ボタンアニメーション
        location: src/components/ui/animated-button.tsx
        details: |
          服用タイミングボタンのアニメーション効果。
          ボタン押下時の満ちていくアニメーションに加え、ホバー時の拡大と
          押下時の縮小エフェクトを追加。シャドウ効果も追加し、立体感と操作性を向上。

      - name: インタラクティブフィードバック
        location: src/pages/index.tsx
        details: |
          服用回数操作ボタンのインタラクティブフィードバック。
          マウスホバーやクリック時に背景色を動的に変更するイベントハンドラを実装し、
          ユーザーの操作に対するリアルタイムな視覚フィードバックを提供。
          Tailwindだけでは実現困難な動的な色変化をインラインスタイルとJavaScriptイベントで実現。
          通常時の背景色も薄いグレーから中間的なグレー(#e5e7eb)に調整し、
          ホバー時はより濃いグレー(#d1d5db)、押下時はさらに濃いグレー(#9ca3af)に
          変化させることで、操作感を大幅に向上させた。

  - name: 服用方法UI（RecommendedIntakeInfo）
    location: src/components/RecommendedIntakeInfo.tsx
    details: |
      サプリメントカード内の「服用方法」表示UIを大幅に改善。
      - 服用方法の詳細説明をポップアップ形式で表示し、カード内の左右中央に揃えて重なりを防止
      - ポップアップは服用方法エリアの上に重なり、スクロール不要なサイズで全内容が読めるよう調整
      - ポップアップには閉じるボタンを追加し、ユーザーが直感的に操作できるよう配慮
      - 服用方法エリアは常時背景色・ボーダーを表示し、ポップアップ非表示時も視認性を確保
      - UI全体の配色・余白・シャドウを調整し、視認性と一貫性を向上
      - 各服用タイミングのアイコン・ラベル表示を統一し、アクセシビリティも考慮
      - 既存のカードUIやフォームUIとのデザイン統一を図り、ユーザー体験を向上

  - name: フォームバリデーション
    location:
      - src/pages/login.tsx
      - src/pages/signup.tsx
      - src/pages/index.tsx
      - src/schemas/auth.ts
      - src/schemas/supplement.ts
    functions:
      - loginSchema: ログインフォームのバリデーション
      - signupSchema: 新規登録フォームのバリデーション
      - supplementSchema: サプリメント登録フォームのバリデーション
    details: |
      Zodを使用した堅牢なフォームバリデーションを実装。
      React Hook Formと連携し、以下の機能を提供:

      - リアルタイムバリデーション
      - エラーメッセージの表示
      - フォーム送信時の検証
      - 複雑な条件付きバリデーション（refineメソッド使用）

      各フォームに適したバリデーションルールを設定:

      ログインフォーム:
      - メールアドレス: 必須、メール形式
      - パスワード: 必須、8文字以上

      新規登録フォーム:
      - メールアドレス: 必須、メール形式
      - パスワード: 必須、8文字以上、複雑さ要件（小文字、大文字、数字を含む）
      - パスワード確認: 必須、パスワードとの一致

      サプリメント登録フォーム:
      - サプリメント名: 必須
      - 内容量: 必須、正の整数
      - 服用量: 必須、正の整数
      - 単位: 必須
      - 服用方法: タイミングベースまたは回数ベース
      - タイミングベース選択時: 少なくとも1つの時間帯選択が必須
      - 回数ベース選択時: 目標服用回数の入力が必須（正の整数）
      - 推奨服用方法: 食前/食後/なしをラジオボタンで排他的選択、空腹時と就寝前はチェックボックスで独立選択

      コードの保守性向上のため、バリデーションスキーマを専用の src/schemas ディレクトリに
      分離し、各機能ごとに別ファイルで管理。これにより:

      - コードの再利用性向上
      - 関心の分離
      - 保守性の向上
      - テスト容易性

      数値フィールドのバリデーション強化:
      - 未入力時の適切なエラーメッセージ表示
      - 1桁目の削除を可能にする入力方式の実装
      - 正の整数値のみ許可するバリデーション
      - 共通のバリデーションロジックを関数として抽出（numberFieldSchema）

      型変換に関しては、src/lib/type-guards.ts にAPIレスポンスと
      モデルの変換を行うユーティリティ関数を実装。これによりFirestoreから取得した
      データを安全にアプリケーションの型定義に変換できる。

  - name: 開発効率・コード品質管理
    description: 開発効率向上とコード品質の自動管理
    location:
      - .husky/pre-commit
      - .prettierrc
      - package.json (lint-staged設定)
      - .github/workflows/ci.yml
      - .github/workflows/security.yml
      - .github/dependabot.yml
    functions:
      - pre-commit: Git コミット前の自動チェック
      - lint-staged: ステージングされたファイルの自動整形
      - prettier: コード フォーマッティング
      - CI/CD: Push/PR時の自動品質チェック
      - security-audit: セキュリティ脆弱性の自動検査
      - dependabot: 依存関係の自動更新
    details: |
      コード品質の一貫性を保つため、以下の開発ツールを統合:

      ### ローカル開発環境での品質管理

      Husky (^8.0.0):
      - Git フックの管理
      - コミット前の自動実行処理（pre-commit）
      - TypeScript 型チェック（npm run build）
      - Lint-Staged の自動実行

      Lint-Staged (^15.0.2):
      - ステージングされたファイルのみを対象とした処理
      - TypeScript/TSX ファイル: ESLint による自動修正 + Prettier による整形
      - その他のファイル（JS, JSX, JSON, CSS, MD）: Prettier による整形

      Prettier (^3.5.3):
      - 統一されたコードスタイルの自動適用
      - 設定内容（.prettierrc）:
        - セミコロン: 有効
        - 末尾カンマ: ES5 準拠
        - シングルクォート: 無効（ダブルクォート使用）
        - 印刷幅: 80 文字
        - タブ幅: 2 スペース
        - タブ文字: 無効（スペース使用）

      ### CI/CDパイプライン（GitHub Actions）

      メインCI (.github/workflows/ci.yml):
      - トリガー: main/developブランチへのpush、またはPR作成時
      - 実行環境: Ubuntu Latest (Node.js 18.x)
      - 実行内容:
        - ESLint による静的解析
        - TypeScript 型チェック（npm run type-check）
        - Prettier フォーマットチェック（npm run format:check）
        - Next.js ビルド確認
      - キャッシュ: npm依存関係のキャッシュによる高速化

      セキュリティチェック (.github/workflows/security.yml):
      - トリガー: push/PR + 毎週月曜日午前9時（JST）の定期実行
      - 実行内容:
        - npm audit による脆弱性検査（高レベル以上のみ失敗扱い）
        - 中程度脆弱性は情報表示のみ（個人開発向け設定）
        - 高レベル/重要脆弱性検出時の自動失敗
      - 目的: セキュリティリスクの早期発見と対応
      - デバッグ機能:
        - 詳細な脆弱性情報をJSON形式で出力
        - 重要度別の脆弱性カウント表示
        - デバッグ結果をアーティファクトとして保存（30日間）
        - より詳細なエラーレポート機能

      ### 依存関係管理（Dependabot）

      Dependabot (.github/dependabot.yml):
      - npm依存関係の自動更新:
        - スケジュール: 毎週月曜日午前9時（JST）
        - 対象: 直接依存関係 + 間接依存関係
        - 制限: メジャーバージョンアップは除外（安全性重視）
        - PR上限: 5件まで
      - GitHub Actions の自動更新:
        - スケジュール: 毎週月曜日午前9時（JST）
        - PR上限: 2件まで
      - 設定:
        - コミットメッセージプレフィックス: "deps"
        - 自動アサイン・レビュー機能
        - セキュリティアップデートの優先実行
      - 注記: 個人開発のため、GitHub Settings > Security & analysis で一時無効化可能

      ### 追加されたnpm scripts

      - type-check: TypeScript型チェック（tsc --noEmit）
      - format: Prettier自動フォーマット
      - format:check: Prettierフォーマットチェック
      - lint:fix: ESLint自動修正

      ### 品質管理の多層構造

      1. **ローカル開発時**: Husky + Lint-Staged による即座のチェック
      2. **リモートpush/PR時**: GitHub Actions による包括的チェック
      3. **定期実行**: セキュリティ監査と依存関係更新
      4. **手動実行**: 開発者による個別スクリプトの実行

      この構成により、開発者は以下の恩恵を受けられる:
      - コミット時の自動的な品質チェック
      - チーム全体でのコードスタイル統一
      - 手動でのフォーマット作業削減
      - TypeScript 型エラーの事前検出
      - セキュリティ脆弱性の早期発見
      - 依存関係の自動更新による保守負荷軽減（必要に応じて無効化可能）
      - 長期的な保守性の向上

      なお、index.tsx では不要な単位選択肢の削除も同時に実施し、
      UI の整理とコード品質向上を両立させている。
